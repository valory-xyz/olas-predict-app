import { formatUnits } from 'viem';

const phoneticSyllables = [
  'ba',
  'bi',
  'bu',
  'ka',
  'ke',
  'ki',
  'ko',
  'ku',
  'da',
  'de',
  'di',
  'do',
  'du',
  'fa',
  'fe',
  'fi',
  'fo',
  'fu',
  'ga',
  'ge',
  'gi',
  'go',
  'gu',
  'ha',
  'he',
  'hi',
  'ho',
  'hu',
  'ja',
  'je',
  'ji',
  'jo',
  'ju',
  'ka',
  'ke',
  'ki',
  'ko',
  'ku',
  'la',
  'le',
  'li',
  'lo',
  'lu',
  'ma',
  'me',
  'mi',
  'mo',
  'mu',
  'na',
  'ne',
  'ni',
  'no',
  'nu',
  'pa',
  'pe',
  'pi',
  'po',
  'pu',
  'ra',
  're',
  'ri',
  'ro',
  'ru',
  'sa',
  'se',
  'si',
  'so',
  'su',
  'ta',
  'te',
  'ti',
  'to',
  'tu',
  'va',
  've',
  'vi',
  'vo',
  'vu',
  'wa',
  'we',
  'wi',
  'wo',
  'wu',
  'ya',
  'ye',
  'yi',
  'yo',
  'yu',
  'za',
  'ze',
  'zi',
  'zo',
  'zu',
  'bal',
  'ben',
  'bir',
  'bom',
  'bun',
  'cam',
  'cen',
  'cil',
  'cor',
  'cus',
  'dan',
  'del',
  'dim',
  'dor',
  'dun',
  'fam',
  'fen',
  'fil',
  'fon',
  'fur',
  'gar',
  'gen',
  'gil',
  'gon',
  'gus',
  'han',
  'hel',
  'him',
  'hon',
  'hus',
  'jan',
  'jel',
  'jim',
  'jon',
  'jus',
  'kan',
  'kel',
  'kim',
  'kon',
  'kus',
  'lan',
  'lel',
  'lim',
  'lon',
  'lus',
  'mar',
  'mel',
  'min',
  'mon',
  'mus',
  'nar',
  'nel',
  'nim',
  'nor',
  'nus',
  'par',
  'pel',
  'pim',
  'pon',
  'pus',
  'rar',
  'rel',
  'rim',
  'ron',
  'rus',
  'sar',
  'sel',
  'sim',
  'son',
  'sus',
  'tar',
  'tel',
  'tim',
  'ton',
  'tus',
  'var',
  'vel',
  'vim',
  'von',
  'vus',
  'war',
  'wel',
  'wim',
  'won',
  'wus',
  'yar',
  'yel',
  'yim',
  'yon',
  'yus',
  'zar',
  'zel',
  'zim',
  'zon',
  'zus',
  'zez',
  'zzt',
  'bzt',
  'vzt',
  'kzt',
  'mek',
  'tek',
  'nek',
  'lek',
  'tron',
  'dron',
  'kron',
  'pron',
  'bot',
  'rot',
  'not',
  'lot',
  'zap',
  'blip',
  'bleep',
  'beep',
  'wire',
  'byte',
  'bit',
  'chip',
];

const generatePhoneticSyllable = (seed: number) => {
  return phoneticSyllables[seed % phoneticSyllables.length];
};

const generatePhoneticName = (address: string, startIndex: number, syllables: number): string => {
  return Array.from({ length: syllables }, (_, i) => {
    const slice = address.slice(startIndex + i * 8, startIndex + (i + 1) * 8);
    const seedValue = parseInt(slice, 16);
    return !isNaN(seedValue) ? generatePhoneticSyllable(seedValue) : phoneticSyllables[0];
  })
    .join('')
    .toLowerCase();
};

/**
 *
 * @param address
 * @returns a generated name of the form "wimyon-pade06"
 */
export const generateName = (address: string): string => {
  const firstName = generatePhoneticName(address, 2, 2);
  const lastNamePrefix = generatePhoneticName(address, 18, 2);
  const lastNameNumber = parseInt(address.slice(-4), 16) % 100;

  return `${firstName}-${lastNamePrefix}${lastNameNumber.toString().padStart(2, '0')}`;
};

export const getAgentTotalEarnings = (totalPayout: string, totalTraded: string) => {
  const totalEarnings =
    parseFloat(formatUnits(BigInt(totalPayout), 18)) -
    parseFloat(formatUnits(BigInt(totalTraded), 18));

  return Math.max(totalEarnings, 0).toLocaleString('en-US', {
    style: 'currency',
    currency: 'USD',
  });
};
